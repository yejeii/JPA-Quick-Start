
1. Spring
   1.1 배경
       EJB(Enterprise Java Bean) 로 개발시 어렵고, 무거운 것이 단점.

       - 경량프레임 워크의 필요성이 대두. => Spring
       - 애플리케이션에서 사용되는 여러 가지 빈(클래스 객체)을 개발자가 아닌
                 스프링 프레임워크가 권한을 가지고 직접 관리하는 특징이 있음.
        ( 약한 결합 )
       - model 2 에서는 controller 가 요청 처리를 위해서 해당 dao가 필요함.
         => 강한 결합 대신에 느슨한 결합이 되도록 개발을 해야함.
         => 느슨한 결합을 제공해주는 것이 spring 임.( DI 개념을 활용 )

   1.2 특징
       - EJB 보다 가볍고 배우기도 쉽고, 경량 컨테이너의 기능을 수행함.
       - 제어역행(IoC, Inversion of Control) 기술을 이용해 애플리케이션 간의 느슨한 결합을 제어.
         빈(클래스 객체) 등을 개발자가 코드 레벨에서 생성하지 않고 프레임워크가 생성하여 사용하는 방법

         객체 생성 관련 코드를 클래스 소스 상에 직접 작성하는 것이 OCP 위반 및 유지보수성 악화의 문제를 낳기 때문에,
         이를 해결하기 위하여 나온 기술이 제어의 역전(IoC).

         제어의 역전은 객체 생성문을 직접 작성해서 해당 객체를 이용할 수 있게 하는 게 아닌
         객체가 필요한 곳에 (어딘가로부터 객체를 가져와서) 객체를 주입(Injection)해줌으로써
         해당 객체를 이용할 수 있도록 해주는 것이다. (*어딘가: 스프링 컨테이너)

         -> “객체의 생성과 객체 간 의존관계에 대한 코드가 클래스 소스 상에서 완전히 사라짐”
         -> 1. 객체를 변경해줘야 할 때 해당 객체를 사용 중인 모든 클래스에서 소스를 수정해주지 않아도 된다.
            2. 객체지향의 OCP원칙(개방 폐쇄 원칙)을 위반하지 않는다.

         -> 훨씬 더 유연하고(컴포넌트[객체] 간 결합도가 낮고) 유지 보수하기 좋은 애플리케이션을 개발하고 운용할 수가 있게 된다.

       - 의존성 주입(DI, Dependency Injection) 기능을 지원함.
         Controller 와 DAO 처럼 의존관계에 있는 빈을 프레임워크가 관계를 맺어줌.

       - 관정 지향(AOP, Aspect-Oriented Programming) 기능을 이용해서 자원관리를 함.
         핵심 기능 외에 부수적인 기능들을 분리 구현함으로써 모듈성을 증가시키는 방법.

       - 다양한 라이브러리와의 연동 기능을 지원함.

   1.3 스프링 프레임워크의 구성
       - Core : IoC 등의 기능을 제공.
       - Context : 빈에 대한 접근 방법을 제공.
       - ORM : 마이바티스 같은 영속성 관련 프레임워크와 연동된 기능을 제공.
                              마이바티스는 Sql Mapper Framework 임.
       - AOP : 관점지향기능을 제공.
       - WebMVC : 스프링에서 MVC 구현에 관련된 기능을 제공.

   1.4 의존성 주입(DI)
       - 빈 간의 의존관계를 개발자가 직접 코딩을 통해 컴포넌트(클래스)에 부여하는 것이 아니라 컨테이너(Spring)가 연관관계를 직접 규정하는 것임.
          => 약한 결합이 됨.( loosely coupled )

       - 의존성 주입 방법
         1. xml 을 활용
            - xml file 에 사용할 클래스(bean)를 등록.
              id, class 의 속성 정보를 등록해서 사용.
              id 는 인스턴스 변수처럼 사용하게 됨.
            - XmlBeanFactory 클래스를 이용해서 xml file 정보를 읽음.
            - BeanFactory.getBean() 의 매개변수로 xml 의 id 를 이용하여
                           객체를 반환받음.
            - 반환된 객체를 이용하여, 메소드를 호출하여 사용하면 됨.
         2. 어노테이션을 이용

   1.5 관점 지향 프로그래밍(AOP)
       - 애플리케이션 개발시 트랜잭션, 예외처리, 로그 기록 등의 기능은 공통적으로 사용되는 기능임.
       - 비즈니스 로직 처리시 이런 공통 기능을 모든 곳에서 구현을 하게 되면, 유지보수가 점점 더 힘들어지게 됨.
         이러한 부분을 모듈화할 필요가 있음.
       - 이러한 문제를 관점 지향 프로그래밍으로 해결할 수 있음.

       - AOP 는 메소드 안의 주 기능과 보조 기능을 분리한 후 선택적으로 적용해서 사용한다는 개념임.
       - AOP 를 사용하게 되면, 보조 기능을 하나의 장소에 모아서 관리할 수 있음.
         또, 보조 기능을 주기능에서 선택적으로 적용할 수 있어 코드가 단순해지고 가독성이 향상되게 됨.

       - AOP 사용 방법
         advice : 부기능
             aspect(보조기능) 의 실제 구현체를 의미함.
         target : 주기능
             advice 가 적용되는 클래스를 의미함.

       - AOP 적용 전.
         log.info();           // AOP의 부기능(advice) 이 됨.
         cal.add(100, 200);	   // 주기능(target) 이 됨.
         log.info();           // AOP의 부기능(advice) 이 됨.

       - AOP 적용 후
         cal.add(100, 200);    // 관심사(비즈니스 로직)가 분리가 됨.
         					   // 유지보수, 가독성, 모듈화가 가능해짐.

       - AOP 가 많이 적용되는 부분 : 로깅, 보안, 트랜잭션 등

   1.6 Spring MVC
       - 특징
         a. 모델 2 아키텍처를 지원
            - 모델1
              . view 와 logic(controller) 을 jsp 페이지 하나에서 처리하는 구조.
            - 모델2
              . view 와 controller(servlet) 가 분리되는 구조.
       - 구조
         a. DispatcherServlet
            . 클라이언트의 요청을 받아서 해당 요청에 대한 컨트롤러를 선택하여 요청을 전달.
         b. HandlerMapping
            . 클라이언트가 요청한 URL 을 처리할 컨트롤러를 지정.
         c. Controller
            . 클라이언트의 요청을 처리한 후 그 결과를 DispatcherServlet 에 전달.
            . 스프링 프레임워크에서 제공하는 controller 를 상속받아서 구현해야 함.
            . 단일 액션 컨트롤러와 다중 액션 컨트롤러가 있음.
         d. ModelAndView
            . 컨트롤러가 처리한 결과 및 뷰 선택에 필요한 정보를 저장.
         e. ViewResolver
            . 컨트롤러의 처리 결과를 전달할 뷰를 지정. JSP 를 지정.
         f. View
            . 컨트롤러의 처리 결과 화면을 생성함. JSP 가 됨.

   1.7 어노테이션
       - 클라이언트 요청을 매핑, 데이터 바인딩, 빈 주입 등을 XML 대신에 어노테이션으로 설정.
       - @Controller : 지정한 클래스를 컨트롤러 Bean 으로 자동 변환.
       - @Service : 지정한 클래스를 서비스 Ben 으로 자동 변환
       - @Repository : 지정한 클래스를 DAO Bean 으로 자동 변환
       - @Component : 지정한 클래스를 Bean 으로 자동 변환
       - 어노테이션으로 지정된 클래스들은 스프링 실행시 자동으로 빈으로 생성됨.

