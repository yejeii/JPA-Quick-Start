
영속성 컨텍스트, 엔티티 관리

1. 영속성 컨텍스트
    - 컨텍스트는 컨테이너라는 의미
      엔티티를 저장해서 관리하는 공간 또는 영역
    - 컨테이너의 핵심 기능은 persistence.xml 의 메타 정보를 참조하여 애플리케이션 운영에 필요한 객체를 생성하고 관리하는 것
    - 영속성 컨테이너는 persistence.xml 의 메타 정보를 참조하여 메타 정보를 로딩하고,
      Entity Manager 객체를 생성할 때 자동으로 생성
    - Entity Manager 가 제공하는 메서드를 통해서만 접근 가능
    - 영속성 컨테이너가 관리하는 엔티티의 상태는 생성, 관리, 분리, 삭제 의 4가지 상태로 구분

2. 관리 상태
    - 엔티티를 영속성 컨테이너에 등록
    - Entity Manager 의 persist() 
        : 엔티티 생성 -> 컨테이너에 등록
      Entity Manager 의 find() 
        : DB 조회 -> 엔티티 생성 -> 컨테이너에 등록 -> 요청한 쪽에 엔티티 전달
    - Entity 가 DB 에 저장(INSERT)
        : 반드시 트랜잭션 안에서 persist() 가 호출되어야 함
      
3. 분리 상태
    - 영속 컨텍스트에 있던 엔티티가 특정 작업에 의해 영속 컨텍스트를 벗어난 상태
    - 엔티티를 수정해도 DB 에 반영 X
      즉, Dirty Check 수행 X
    - 생성 상태와 분리 상태의 차이점
      생성 상태 : persist() 호출 X  
                 즉, 식별자가 없는 상태
      분리 상태 : persist() 호출한 적이 있음
                 즉, 식별자가 있는 상태
    - 분리 상태 전환을 위한 Entity Manager 메서드
        - detach(Entity 객체)
            특정 엔티티만 분리
        - clear()
            컨테이너 초기화.
            영속 컨테이너가 관리하는 모든 엔티티를 분리 상태로 전환
        - close()
            컨테이너 종료
            엔티티가 있다면 먼저 분리 상태로 모두 전환 후, 종료

4. JPA 사용시 중요한 2가지 부분
    - 설계 부분
      JPA 엔티티와 테이블 매핑
    - 사용 부분
      실제 사용 부분

5. 영속성 컨텍스트 
    - 애플리케이션에서 엔티티를 영구 저장하는 환경
    - 엔티티 매니저를 통해 저장

    - 장점
        1차 캐시, 동일성 보장, 트랜잭션 지원, 쓰기 지연, 변경 감지, 지연 로딩

        - 1차 캐시
          find() - 영속성 컨텍스트에서 조회
                   (1차 캐시에서 조회, DB 까지 가지 않아도 됨)
                 - DB 에서 조회(1차 캐시에 저장)
        
        - 동일성 보장
          Employee emp1 = em.find(Employee.class, 1L);
    	  Employee emp2 = em.find(Employee.class, 1L);
    	
    	  emp1 == emp2 => true  
        
          영속성 컨텍스트에서 식별자로 관리되는 엔터티는 동일함.

        - 트랜잭션
          JPA 입장에서의 트랜잭션의 의미는 변경된 사항 - 쓰기지연
          
          => 트랜잭션을 지원하는 쓰기지연
             트랜잭션을 커밋을 할 때 모아둔 모든 쿼리들을 한번에 데이터베이스에 전송. 
             쓰기 지연 SQL 저장소
    
        - 변경 감지(Dirty Checking)
          영속성 관리 상태의 엔터티.
      	
      	  emp.setName("이름 변경");
      	  
      	  tx.commit();
      	  
      	  개발자에게는 Update sql 작성을 하지 않아도 됨.
      	  
      	  스냅샷(원본) 과 변경된 엔터티를 비교. -> update sql 을 작성해서
      	  쓰기 지연 SQL 저장소에 저장. -> 데이터베이스에 전송
        
        - Flush(플러시)
          예를 들어서, 트랜잭션 커밋 시 플러시 호출.
    	
    	  영속성 컨텍스의 변경 내용을 데이터베이스에 반영하는 작업을 수행.
    	  
    	  영속성 컨텍스트에 있는 모든 엔터티를 스냅샷과 비교해서,
    	  수정이 발생된 엔터티를 찾고, 해당 수정에 맞는 SQL 이 작성되고,
    	  작성된 SQL 쓰기 지연 SQL 저장소에 저장되고, 데이터베이스에 전송.
    	  
    	  em.flush()
    	  JPQL 쿼리 실행이 플러시가 자동 호출됨.